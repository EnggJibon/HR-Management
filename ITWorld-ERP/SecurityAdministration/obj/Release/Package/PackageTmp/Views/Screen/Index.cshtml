@using SecurityAdministration.BLL.ViewModels
@model ScreenVM

@{
    ViewBag.Title = "Screen Management";
}

@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-lg-12">
            <div data-alerts="alerts" id="message" data-titles="{}" data-ids="myid" data-fade="4000"></div>
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-heading">
            Screen Setup
            @Html.Hidden("hdnIsInsert", true)
        </div>

        <div class="panel-body">
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Module ID </label>
                        @Html.HiddenFor(model => model.Screen.ScreenCode)
                        @Html.DropDownListFor(model => model.Screen.ModuleID, Model.ModuleList, "--Select--", new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label>Title </label>
                        @Html.TextBoxFor(model => model.Screen.Title, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Type </label>
                        @Html.TextBoxFor(model => model.Screen.Type, new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label>URL </label>
                        @Html.TextBoxFor(model => model.Screen.URL, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label> Description </label>
                        @Html.TextBoxFor(model => model.Screen.Description, new { @class = "form-control input-sm" })
                    </div>

                    <div class="col-md-6">
                        <label> Is Active</label>
                        @Html.CheckBoxFor(model => model.Screen.IsActive)
                    </div>
                </div>
            </fieldset>
            <fieldset class="form-horizontal">
                <div class="col-md-6 ">
                    <div class="form-group">
                        <input type="button" id="btnSave" value="Save" class="btn btn-default btn-sm" />
                        <input type="button" value="Reset" class="btn btn-default btn-sm" onclick="return clearScreenData()" />
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
}

<div class="panel panel-default">
    <div class="panel-heading">
        List of Roles
    </div>
    <div class="panel-grid">
        <div id="grid"></div>
    </div>
</div>

<div id="myModal" class="modal fade">
    @Html.Partial("_ConfirmationView")
</div>

<script type="text/javascript">

    $(document).ready(function () {
        $("#hdnIsInsert").val(true);
        displayScreenList();
    });

    function displayScreenList() {
        var dataSourceUrl = "/Screen/ScreenList";
        var dataSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            transport: {
                read: {
                    url: dataSourceUrl,
                    type: "POST"
                }
            },
            schema: {
                data: function (data) {
                    return data.Data;
                },
                total: function (data) {
                    return data.Total;
                },
                model: {
                    fields: {
                        ScreenCode: { type: "string" },
                        //ModuleID: { type: "string" },
                        Title: { type: "string" },
                        Type: { type: "string" },
                        URL: { type: "string" },
                        Description: { type: "string" },
                        ModuleTitle: { type: "string" },
                    }
                }
            },
            sort: [
                { field: "ScreenCode", dir: "asc" },
                { field: "Title", dir: "asc" },
                { field: "Type", dir: "asc" },
                { field: "URL", dir: "asc" },
                { field: "Description", dir: "asc" },
                { field: "ModuleTitle", dir: "asc" },
            ],
            pageSize: 10,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true
        });
        $("#grid").kendoGrid({
            selectable: "row",
            dataSource: dataSource,
            filterable: {
                extra: true
            },
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            height: 200,
            groupable: false,
            sortable: true,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            columns: [
                {
                    field: "ScreenCode",
                    title: "Screen Code",
                    filterable: true,
                },
                {
                    field: "Title",
                    title: "Title",
                    filterable: true,
                },
                {
                    field: "Type",
                    title: "Type",
                    filterable: true,
                },
                {
                    field: "URL",
                    title: "URL",
                    filterable: true,
                },
                {
                    field: "Description",
                    title: "Description",
                    filterable: true,
                },
                {
                    field: "ModuleTitle",
                    title: "Module Title",
                    filterable: true,
                },
                {
                    field: "IsActive",
                    title: "Status",
                    filterable: false,
                    template:
                        function (dataItem) {
                            return dataItem.IsActive ? "Active" : "Inactive";
                        }
                },
                {
                    width: 150,
                    field: "ScreenCode",
                    title: "Select",
                    sortable: false,
                    filterable: false,
                    template:
                        function (dataItem) {
                            if (typeof dataItem.Id != "string") {
                                return "<a class='btn-link' onclick='editScreenData(" + dataItem.ScreenCode + ")'>Edit</a> | <a class='btn-link-delete' onclick='deleteItem(" + dataItem.ScreenCode + ")'>Delete</a>";
                            }
                        }
                }
            ]
        });
    }

    function editScreenData(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetScreen", "Screen")',
            data: { id: id },
            cache: false,
            success: function (data) {
                if (data != null) {
                    $('#Screen_ScreenCode').val(data.ScreenCode);
                    $('#Screen_ModuleID').val(data.ModuleID);
                    $('#Screen_Title').val(data.Title);
                    $('#Screen_IsActive').prop('checked', data.IsActive);
                    $('#Screen_URL').val(data.URL);
                    $('#Screen_Description').val(data.Description);
                    $("#hdnIsInsert").val(false);
                    $("#Screen_Type").val(data.Type);
                    $("#Screen_ModuleTitle").val(data.ModuleTitle);
                }
            },
            error: function () {
                showMessage('Connection error.', 'error', 'Error!');
            }
        });
    }

    function deleteItem(id) {
        if (confirm("Are you sure you want to delete this screen?")) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("Delete", "Screen")',
                data: { id: id },
                cache: false,
                success: function () {
                    clearScreenData();
                    displayScreenList();
                    $("#myModal").modal('hide');
                    showMessage('Deleted successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    }

    function clearScreenData() {
        $('#Screen_ScreenCode').val("");
        $('#Screen_ModuleID').val("");
        $('#Screen_Title').val("");
        $('#Screen_IsActive').is(":checked", false);
        $('#Screen_URL').val("");
        $('#Screen_Description').val("");
        $("#Screen_Type").val("");
    }

    $('#btnSave').click(function () {

        if (validateScreenData()) {
            var jsonObject = {
                "ScreenCode": $('#Screen_ScreenCode').val(),
                "ModuleID": $('#Screen_ModuleID').val(),
                "Title": $('#Screen_Title').val(),
                "IsActive": $('#Screen_IsActive').is(":checked"),
                "Type": $("#Screen_Type").val(),
                "URL": $('#Screen_URL').val(),
                "Description": $('#Screen_Description').val()
            };
            $.ajax({
                type: "POST",
                url: '@Url.Action("Save", "Screen")',
                data: JSON.stringify({ screen: jsonObject, isInsert: $("#hdnIsInsert").val() }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                cache: false,
                success: function () {
                    displayScreenList();
                    clearScreenData();
                    showMessage('Saved successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    });

    function validateScreenData() {
        if ($('#Screen_ModuleID').val() == "") {
            showMessage('Module Name is required.', 'warning', 'Warning!');
            return false;
        } else if ($('#Screen_Title').val() == "") {
            showMessage('Screen Title is required.', 'warning', 'Warning!');
            return false;
        } else if ($('#Screen_Type').val() == "") {
            showMessage('Screen Type is required.', 'warning', 'Warning!');
            return false;
        } else if ($('#Screen_URL').val() == "") {
            showMessage('Screen URL is required.', 'warning', 'Warning!');
            return false;
        } else if ($('#Screen_Description').val() == "") {
            showMessage('Screen Description is required.', 'warning', 'Warning!');
            return false;
        }
        return true;
    }

    function showMessage(message, priority, title) {
        $('#message').html("");
        $(document).trigger("add-alerts", [
          {
              'message': message,
              'priority': priority,
              'title': title
          }
        ]);
    }
</script>
<script src="~/Scripts/jquery.bsAlerts.js"></script>

