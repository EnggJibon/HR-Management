@using SecurityAdministration.BLL.ViewModels
@model UserVM

@{
    ViewBag.Title = "Index";
}

@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-lg-12">
            <div data-alerts="alerts" id="message" data-titles="{}" data-ids="myid" data-fade="4000"></div>
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-heading">
            User
        </div>
        <div class="panel-body">
            <fieldset class="form-horizontal">
                <div class="form-group col-md-12">
                    <label>User Search</label>
                    <div class="form-inline">
                        @Html.TextBox("txtSearchOption", "", new { @class = "form-control input-sm", @style = "width: 50%;" })
                        <input type="button" id="btnSearch" value="Search" class="btn btn-default" style="margin-left: 25PX;"/>
                    </div>
                </div>
            </fieldset>
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-heading">
            User Information
            @Html.Hidden("hdnIsInsert", true)
            @Html.Hidden("isResetPassword", false)
        </div>
        <div class="panel-body">
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>User Code</label>
                        @Html.HiddenFor(model => model.User.UserID)
                        @Html.TextBoxFor(model => model.User.UserCode, new { @Value = ViewBag.UserCode, @class = "form-control input-sm", @readonly = "readonly" })
                    </div>
                    <div class="col-md-6">
                        <label>Description</label>
                        @Html.TextBoxFor(model => model.User.Description, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Title</label>
                        @Html.DropDownListFor(model => model.User.Title, new List<SelectListItem>
                                    {
                                        new SelectListItem { Text = "--Select--", Value = "" },
                                        new SelectListItem { Text = "Mr.", Value= "Mr."},
                                        new SelectListItem { Text = "Mrs.", Value= "Mrs."},
                                        new SelectListItem { Text = "Miss.", Value= "Miss."},
                                        new SelectListItem { Text = "Dr.", Value= "Dr."},
                                        new SelectListItem { Text = "Engr.", Value= "Engr."},
                                        new SelectListItem { Text = "Prof.", Value= "Prof."},
                                    }, new { @class = "form-control input-sm" })

                    </div>
                    <div class="col-md-6">
                        <label>First Name</label>
                        @Html.TextBoxFor(model => model.User.FirstName, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>

            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">

                        <label>Middle Name</label>

                        @Html.TextBoxFor(model => model.User.MiddleName, new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label>Last Name</label>

                        @Html.TextBoxFor(model => model.User.LastName, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>

            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-lg-6">
                        <label>Designation ID</label>
                        @Html.DropDownListFor(model => model.User.DesignationID, Model.DesignationList, "--Select--", new { @class = "form-control input-sm" })
                    </div>

                    <div class="col-md-6">
                        <label>Email</label>
                        @Html.TextBoxFor(model => model.User.Email, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>

            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Phone</label>
                        @Html.TextBoxFor(model => model.User.Phone, new { @class = "form-control input-sm" })
                    </div>

                    <div class="col-md-6">
                        <label>Mobile</label>
                        @Html.TextBoxFor(model => model.User.Mobile, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>

            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>SupervisorUserID</label>
                        @Html.DropDownListFor(model => model.User.SupervisorUserID, Model.SupervisorList, "--Select--", new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label class="label-checkbox">Is Active</label>
                        @Html.CheckBoxFor(model => model.User.IsActive)
                    </div>
                </div>
            </fieldset>
            <fieldset class="form-horizontal">
                <div class=" form-group">
                    <div class="col-md-6">
                        <label> Login ID</label>
                        @Html.TextBoxFor(model => model.User.LoginID, new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label>Password</label>
                        <div class="form-inline">
                            @Html.TextBoxFor(model => model.User.Password, new { @class = "form-control input-sm col-md-3", @style = "width:70%;" })
                            <input type="button" id="btnGenerate" value="Reset Password" class="btn btn-default" style="width: 25%; float: right" />
                        </div>
                    </div>
                </div>
            </fieldset>

            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <input type="button" id="btnSave" value="Save" class="btn btn-default btn-sm" />
                        <input type="button" value="Reset" class="btn btn-default btn-sm" onclick="return clearUserData()" />
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
}

<div class="panel panel-default">
    <div class="panel-heading">
        List of Users
    </div>
    <div class="panel-grid">
        <div id="grid"></div>
    </div>
</div>

<script type="text/javascript">

    $(document).ready(function () {
        $("#hdnIsInsert").val(true);
        $('#isResetPassword').val(false);

        generateUserCode();
        if ($('#User_Password').val() == "") {
            $('#User_Password').attr("disabled", false);
            $('#User_LoginID').attr("readonly", false);
        } else if ($('#User_Password').val()) {
            $('#User_Password').attr("disabled", true);
            $('#User_LoginID').attr("readonly", true);
        }
        displayUserList();
    });

    function displayUserList() {
        var dataSourceUrl = "/User/UserList";
        var dataSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            transport: {
                read: {
                    url: dataSourceUrl,
                    type: "POST"
                }
            },
            schema: {
                data: function (data) {
                    return data.Data;
                },
                total: function (data) {
                    return data.Total;
                },
                model: {
                    fields: {
                        UserID: { type: "string" },
                        UserCode: { type: "string" },
                        UserType: { type: "string" },
                        FullName: { type: "string" },
                        Email: { type: "string" },
                        Mobile: { type: "string" },
                        IsActive: { type: "boolean" },
                        Description: { type: "string" },
                        LoginID: { type: "string" },
                    }
                }
            },
            sort: [
                { field: "UserID", dir: "asc" },
                { field: "UserCode", dir: "asc" },
                { field: "UserType", dir: "asc" },
                { field: "FullName", dir: "asc" },
                { field: "Email", dir: "asc" },
                { field: "Mobile", dir: "asc" },
                { field: "LoginID", dir: "asc" },
            ],
            pageSize: 10,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true
        });
        $("#grid").kendoGrid({
            selectable: "row",
            dataSource: dataSource,
            filterable: {
                extra: true
            },
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            height: 200,
            groupable: false,
            sortable: true,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            columns: [
            {
                field: "UserID", title: "User ID",
            },
            {
                field: "UserCode", title: "User Code", filterable: true,
            },
            {
                field: "UserType", title: "User Type", filterable: true,
            },
            {
                field: "FullName", title: "Full Name", filterable: true,
            },
            {
                field: "Email", title: "Email", filterable: true,
            },
            {
                field: "Mobile", title: "Mobile", filterable: true,
            },
            {
                field: "Description", title: "Description", filterable: true,
            },
            {
                field: "LoginID", title: "Login ID", filterable: true,
            },
            {
                field: "IsActive", title: "Status", filterable: false,
                template:
                    function (dataItem) {
                        return dataItem.IsActive ? "Active" : "Inactive";
                    }
            },
            {
                width: 150, field: "UserID", title: "Select", sortable: false, filterable: false,
                template:
                    function (dataItem) {
                        if (typeof dataItem.Id != "string") {
                            return "<a class='btn-link' onclick='editUserData(" + dataItem.UserID + ")'>Edit</a> | <a class='btn-link-delete' onclick='deleteUserData(" + dataItem.UserID + ")'>Delete</a>";
                        }
                    }
            }]
        });
    }

    function validateUserData() {
        if ($('#User_UserCode').val() == "") {
            showMessage('User Code is required. Please reload again for user code.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#User_UserCode').val() != "" && $('#User_UserCode').val() == "CROSS_LIMIT") {
            showMessage('User Code cross the limit. Please contact with system admin.', 'warning', 'Warning!');
            return false;
        } else if ($('#User_UserType').val() == "") {
            showMessage('User Type is required.', 'warning', 'Warning!');
            return false;
        } else if ($("#User_FirstName").val() == "") {
            showMessage('First Name is required.', 'warning', 'Warning!');
            return false;
        } else if ($('#User_LastName').val() == "") {
            showMessage('Last Name is required.', 'warning', 'Warning!');
            return false;
        } else if ($('#User_Email').val() == "") {
            showMessage('Email is required.', 'warning', 'Warning!');
            return false;
        } else if (checkEmail($('#User_Email').val()) != true) {
            showMessage('Please provide valid email.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#User_Mobile').val() == "") {
            showMessage('Mobile is required.', 'warning', 'Warning!');
            return false;
        } else if ($('#User_DesignationID').val() == "") {
            showMessage('Designation is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#User_LoginID').val() == "") {
            showMessage('Login ID is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#User_Password').val() == "") {
            showMessage('Password is required.', 'warning', 'Warning!');
            return false;
        }

        return true;
    }

    $('#btnGenerate').click(function () {
        if (confirm("Are you sure to reset password?")) {
            $('#User_Password').attr("disabled", false);
            $('#User_Password').val("");
            $('#isResetPassword').val(true);
        }
    });

    $('#btnSave').click(function () {

        if (validateUserData()) {
            var jsonObject = {
                "UserID": $('#User_UserID').val(),
                "UserCode": $('#User_UserCode').val(),
                "UserType": $('#User_UserType').val(),
                "Title": $('#User_Title').val(),
                "FirstName": $("#User_FirstName").val(),
                "MiddleName": $('#User_MiddleName').val(),
                "LastName": $('#User_LastName').val(),
                "DesignationID": $('#User_DesignationID').val(),
                "Email": $('#User_Email').val(),
                "Phone": $('#User_Phone').val(),
                "Mobile": $('#User_Mobile').val(),
                "IsActive": $('#User_IsActive').is(":checked"),
                "SupervisorUserID": $('#User_SupervisorUserID').val(),
                "Description": $('#User_Description').val(),
                "LoginID": $('#User_LoginID').val(),
                "Password": $('#User_Password').val()
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("Save", "User")',
                data: JSON.stringify({ userView: jsonObject, isInsert: $("#hdnIsInsert").val(), isResetPassword: $('#isResetPassword').val() }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                cache: false,
                success: function (data) {
                    displayUserList();
                    clearUserData();
                    showMessage('Saved successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    });

    function editOptionEnable(loginId, id) {
        if (loginId != "") {
            $('#User_Password').val("******************");
            $('#User_Password').attr("disabled", true);
            $('#User_LoginID').attr("readonly", true);
            $("#hdnIsInsert").val(false);
        } else if (loginId == "") {
            $('#User_Password').val("");
            $('#User_Password').attr("disabled", false);
            $('#User_LoginID').attr("readonly", false);
            $("#hdnIsInsert").val(true);
        }
        editUserData(id.trim());
    }

    function editUserData(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetUser", "User")',
            data: { id: id },
            cache: false,
            async: false,
            success: function (data) {
                $('#User_UserID').val(data.UserID);
                $('#User_UserCode').val(data.UserCode);
                $('#User_UserType').val(data.UserType);
                $('#User_Title').val(data.Title);
                $("#User_FirstName").val(data.FirstName);
                $('#User_MiddleName').val(data.MiddleName);
                $('#User_LastName').val(data.LastName);
                $('#User_DesignationID').val(data.DesignationID).attr("selected", "selected");
                $('#User_Email').val(data.Email);
                $('#User_Phone').val(data.Phone);
                $('#User_Mobile').val(data.Mobile);
                $('#User_IsActive').prop("checked", data.IsActive);
                if (data.SupervisorUserID != 0) {
                    $('#User_SupervisorUserID').val(data.SupervisorUserID).attr("selected", "selected");
                }
                $('#User_Description').val(data.Description);
                $('#User_LoginID').val(data.LoginID);
                if (data.Password) {
                    $('#User_Password').val("******************");
                    $('#User_Password').attr("disabled", true);
                    $('#User_LoginID').attr("readonly", true);
                    $("#hdnIsInsert").val(false);
                } else {
                    $('#User_Password').val("");
                    $('#User_Password').attr("disabled", false);
                    $('#User_LoginID').attr("readonly", false);
                    $("#hdnIsInsert").val(true);
                }
                $('#User_LastPasswordChangedDate').val(data.LastPasswordChangedDate);
                $('#User_SetOn').val(data.UCI_SetOn);
                $('#User_SetBy').val(data.UCI_SetBy);
            },
            error: function () {
                showMessage('Connection error.', 'error', 'Error!');
            }
        });
    }

    function deleteUserData(id) {
        if (confirm("Are you sure you want to delete this User?")) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("Delete", "User")',
                data: { id: id },
                cache: false,
                success: function () {
                    clearUserData();
                    displayUserList();
                    showMessage('Deleted successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    }

    function generateUserCode() {
        $.ajax({
            type: "POST",
            url: '@Url.Action("UserCodeGenerate", "User")',
            cache: false,
            success: function (data) {
                $("#User_UserCode").val(data);
            },
            error: function () {
                showMessage('Connection error.', 'error', 'Error!');
            }
        });
    }
    
    function clearUserData() {
        $('input[type=text]').val('');
        $('#User_Title').val("");
        $('#User_SupervisorUserID').val("");
        $('#User_IsActive').prop("checked", false);
        $('#User_Password').attr("disabled", false);
        $('#User_LoginID').attr("readonly", false);
        $("#hdnIsInsert").val(true);
        $('#isResetPassword').val(false);
        generateUserCode();
    }

    function showMessage(message, priority, title) {
        $('#message').html("");
        $(document).trigger("add-alerts", [
            {
                'message': message,
                'priority': priority,
                'title': title
            }
        ]);
    }
</script>
<script src="~/Scripts/jquery.bsAlerts.js"></script>