@using SecurityAdministration.BLL.ViewModels
@model ModuleVM
@{
    ViewBag.Title = "Module Management";
}

@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-lg-12">
            <div data-alerts="alerts" id="message" data-titles="{}" data-ids="myid" data-fade="4000"></div>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            Module Setup
            @Html.Hidden("hdnIsInsert", true)
        </div>
        <div class="panel-body">
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Application ID</label>
                        @Html.HiddenFor(model => model.Module.ModuleID)
                        @Html.DropDownListFor(model => model.Module.ApplicationID, Model.ApplicationList, "--Select--", new { @class = "form-control input-sm" })

                    </div>
                    <div class="col-md-6">
                        <label>Title</label>
                        @Html.TextBoxFor(model => model.Module.Title, new { @class = "form-control input-sm" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Description</label>
                        @Html.TextBoxFor(model => model.Module.Description, new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label class="label-checkbox">Is Active</label>
                        @Html.CheckBoxFor(model => model.Module.IsActive)
                    </div>
                </div>
            </fieldset>

            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <input id="btnSave" type="button" value="Save" class="btn btn-default" />
                        <input type="button" value="Reset" class="btn btn-default" onclick="return clearModuleData();" />
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
}

<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                List of Modules
            </div>
            <div class="panel-grid">
                <div id="grid"></div>
            </div>
        </div>
    </div>
</div>

<div id="myModal" class="modal fade">
    @Html.Partial("_ConfirmationView")
</div>

<script type="text/javascript">

    $(document).ready(function () {
        $("#hdnIsInsert").val(true);
        displayModuleList();
    });

    function displayModuleList() {
        var dataSourceUrl = "/Module/ModuleList";
        var dataSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            transport: {
                read: {
                    url: dataSourceUrl,
                    type: "POST"
                }
            },
            schema: {
                data: function (data) {
                    return data.Data;
                },
                total: function (data) {
                    return data.Total;
                },
                model: {
                    fields: {
                        ModuleID: { type: "string" },
                        Title: { type: "string" },
                        ApplicationID: { type: "string" },
                        ApplicationTitle: { type: "string" },
                    }
                }
            },
            sort: [
                { field: "ModuleID", dir: "asc" },
                { field: "Title", dir: "asc" },
                { field: "ApplicationID", dir: "asc" },
                { field: "ApplicationTitle", dir: "asc" }
            ],
            pageSize: 10,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true
        });
        $("#grid").kendoGrid({
            selectable: "row",
            dataSource: dataSource,
            filterable: {
                extra: true
            },
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            height: 200,
            groupable: false,
            sortable: true,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            columns: [
            {
                field: "ModuleID", title: "Module ID", filterable: true,
            },
            {
                field: "Title", title: "Title", filterable: true,
            },
            {
                field: "ApplicationID", title: "Application ID", filterable: true,
            },
            {
                field: "ApplicationTitle", title: "Application Title", filterable: true,
            },
            {
                field: "IsActive", title: "Status", filterable: false,
                template:
                    function (dataItem) {
                        return dataItem.IsActive ? "Active" : "Inactive";
                    }
            },
            {
                width: 150, field: "ModuleID", title: "Select", sortable: false, filterable: false,
                template:
                    function (dataItem) {
                        if (typeof dataItem.Id != "string") {
                            return "<a class='btn-link' onclick='editModuleData(" + dataItem.ModuleID + ")'>Edit</a> | <a class='btn-link-delete' onclick='deleteItem(" + dataItem.ModuleID + ")'>Delete</a>";
                        }
                    }
            }]
        });
    }

    function validatedModule() {

        if ($('#Module_ApplicationID').val() == "") {
            showMessage('Application is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#Module_Title').val() == "") {
            showMessage('Title is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#Module_Description').val() == "") {
            showMessage('Description is required.', 'warning', 'Warning!');
            return false;
        }
        return true;
    }

    $('#btnSave').click(function () {

        if (validatedModule()) {
            var jsonObject = {
                "ModuleID": $('#Module_ModuleID').val(),
                "ApplicationID": $('#Module_ApplicationID').val(),
                "Title": $('#Module_Title').val(),
                "Description": $('#Module_Description').val(),
                "IsActive": $('#Module_IsActive').prop("checked"),
            };

            //var trNew = "";

            $.ajax({
                type: "POST",
                url: '@Url.Action("Save", "Module")',
                data: JSON.stringify({ module: jsonObject, isInsert: $("#hdnIsInsert").val() }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                cache: false,
                success: function () {
                    displayModuleList();
                    clearModuleData();
                    showMessage('Saved successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    });

    function editModuleData(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetModule", "Module")',
            data: { id: id },
            cache: false,
            success: function (data) {
                $('#Module_ModuleID').val(data.ModuleID);
                $('#Module_ApplicationID').val(data.ApplicationID);
                $('#Module_Title').val(data.Title);
                $('#Module_Description').val(data.Description);
                $('#Module_IsActive').prop("checked", data.IsActive);
                $("#hdnIsInsert").val(false);
            },
            error: function () {
                showMessage('Connection error.', 'error', 'Error!');
            }
        });
    }

    function deleteItem(id) {
        if (confirm("Are you sure you want to delete this module?")) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("Delete", "Module")',
                data: { id: id },
                cache: false,
                success: function () {
                    clearModuleData();
                    displayModuleList();
                    $("#myModal").modal('hide');
                    showMessage('Deleted successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    }

    function clearModuleData() {
        $('#Module_ModuleID').val("");
        $('#Module_ApplicationID').val("");
        $('#Module_Title').val("");
        $('#Module_Description').val("");
        $('#Module_IsActive').prop("checked", false);

    }
    function showMessage(message, priority, title) {
        $('#message').html("");
        $(document).trigger("add-alerts", [
          {
              'message': message,
              'priority': priority,
              'title': title
          }
        ]);
    }
</script>
<script src="~/Scripts/jquery.bsAlerts.js"></script>