@model MenuItemVM
@using SecurityAdministration.BLL.ViewModels
@{
    ViewBag.Title = "Menu Management";
}

@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-lg-12">
            <div data-alerts="alerts" id="message" data-titles="{}" data-ids="myid" data-fade="4000"></div>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            Menu Setup
            @Html.Hidden("hdnIsInsert", true)
        </div>
        <div class="panel-body">
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Caption</label>
                        @Html.HiddenFor(model => model.MenuItem.MenuID)
                        @Html.TextBoxFor(model => model.MenuItem.Caption, new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label>Menu Level</label>
                        @Html.TextBoxFor(model => model.MenuItem.MenuLevel, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>

            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Item Order</label>
                        @Html.TextBoxFor(model => model.MenuItem.ItemOrder, new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label>Module</label>
                        @Html.DropDownListFor(model => model.ModuleList, Model.ModuleList, "--Select--", new { @id = "ddlfModuleList", @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Screen</label>
                        @Html.DropDownList("ScreenList", Enumerable.Empty<SelectListItem>(), "--Select--", new { @class = "form-control input-sm" })

                    </div>
                    <div class="col-md-6">
                        <label>Parent</label>
                        @Html.TextBoxFor(model => model.MenuItem.ParentID, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>Description</label>
                        @Html.TextAreaFor(model => model.MenuItem.Description, new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label class="label-checkbox">Has Child</label>
                        @Html.CheckBoxFor(model => model.MenuItem.HasChild)
                        <label class="label-checkbox">Is Active</label>
                        @Html.CheckBoxFor(model => model.MenuItem.IsActive)
                    </div>
                </div>
            </fieldset>

            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <input id="btnSave" type="button" value="Save" class="btn btn-default btn-sm" />
                        <input type="button" value="Reset" class="btn btn-default btn-sm" onclick="return clearMenuItemData();" />
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
}

<div class="panel panel-default">
    <div class="panel-heading">
        List of Menu Items
    </div>
    <div class="panel-grid">
        <div id="grid"></div>
    </div>
</div>

<div id="myModal" class="modal fade">
    @Html.Partial("_ConfirmationView")
</div>

<script type="text/javascript">

    $(document).ready(function () {
        $("#hdnIsInsert").val(true);
        displayMenuItemList();

        $('#ddlfModuleList').change(function () {
            loadScreenDropdownList($(this).val(), 'ddlfScreenList');
        });
    });

    function displayMenuItemList() {
        var dataSourceUrl = '@Url.Action("MenuItemList", "MenuItem")';
        var dataSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            transport: {
                read: {
                    url: dataSourceUrl,
                    type: "POST"
                }
            },
            schema: {
                data: function (data) {
                    return data.Data;
                },
                total: function (data) {
                    return data.Total;
                },
                model: {
                    fields: {
                        MenuID: { type: "string" },
                        Caption: { type: "string" },
                        MenuLevel: { type: "string" },
                        ItemOrder: { type: "string" },
                        ParentID: { type: "string" },
                        ScreenCode: { type: "string" },
                        Description: { type: "string" },
                        HasChild: { type: "string" },
                        IsActive: { type: "string" },
                        IsDelete: { type: "string" },
                        SetOn: { type: "string" },
                        SetBy: { type: "string" },
                    }
                }
            },
            sort: [
                { field: "MenuID", dir: "asc" },
                { field: "Caption", dir: "asc" },
                { field: "MenuLevel", dir: "asc" },
                { field: "ItemOrder", dir: "asc" },
                { field: "ParentID", dir: "asc" },
                { field: "ScreenCode", dir: "asc" },
                { field: "Description", dir: "asc" },
                { field: "HasChild", dir: "asc" },
                { field: "IsActive", dir: "asc" },
                { field: "IsDelete", dir: "asc" },
                { field: "SetOn", dir: "asc" },
                { field: "SetBy", dir: "asc" },
            ],
            pageSize: 10,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true
        });
        $("#grid").kendoGrid({
            selectable: "row",
            dataSource: dataSource,
            filterable: {
                extra: true
            },
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            height: 200,
            groupable: false,
            sortable: true,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            columns: [
            {
                field: "MenuID",
                title: "Menu",
                width: 95,
            },
            {
                field: "Caption",
                title: "Caption",
                width: 160,
            },
            {
                field: "MenuLevel",
                title: "Level",
                width: 95,
            },
            {
                field: "ItemOrder",
                title: "Order",
                width: 100,
            },
            {
                field: "ParentID",
                title: "Parent",
                width: 105,
            },
            {
                field: "ScreenCode",
                title: "Screen",
                width: 110,
            },
            {
                field: "Description",
                title: "Description",
                width: 150,
            },
            {
                field: "HasChild",
                title: "Child?",
                filterable: false,
                width: 100,
            },
            {
                field: "IsActive",
                title: "Status",
                width: 105,
                filterable: false,
                template:
                    function (dataItem) {
                        return dataItem.IsActive ? "Active" : "Inactive";
                    }
            },
            {
                width: 100,
                field: "MenuID",
                title: "Select",
                sortable: false,
                filterable: false,
                template:
                    function (dataItem) {
                        if (typeof dataItem.Id != "string") {
                            return "<a class='btn-link' onclick='editMenuItemData(" + dataItem.MenuID + ")'>Edit</a> | <a class='btn-link-delete' onclick='deleteItem(" + dataItem.MenuID + ")'>Delete</a>";
                        }
                    }
            }]
        });
    }

    function loadScreenDropdownList(moduleid) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetScreenList", "MenuItem")',
            data: { moduleid: moduleid },
            cache: false,
            async: false,
            dataType: 'json',
            success: function (data) {
                $('#ScreenList').get(0).options.length = 0;
                $('#ScreenList').get(0).options[0] = new Option("--Select--", "0");
                $.map(data, function (item) {
                    $('#ScreenList').get(0).options[$('#ScreenList').get(0).options.length] = new Option(item.Text, item.Value);
                });
            },
            error: function () {
                alert("Error");
            }
        });
    }

    function validatedMenuItem() {
        if ($('#MenuItem_Caption').val() == "") {
            showMessage('Menu Caption is required.', 'warning', 'Warning!');
            return false;
        }
        //else if ($('#ScreenList').val() == "") {
        //    showMessage('Screen is required.', 'warning', 'Warning!');
        //    return false;
        //}
        else if ($('#MenuItem_MenuLevel').val() == "") {
            showMessage('Menu Level is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#MenuItem_ItemOrder').val() == "") {
            showMessage('Item Order is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#ModuleList').val() == "") {
            showMessage('Module is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#ScreenList').val() == "") {
            showMessage('Screen Level is required.', 'warning', 'Warning!');
            return false;
        }
        return true;
    }

    $('#btnSave').click(function () {
        if (validatedMenuItem()) {
            var jsonObject = {
                //"MenuID": $('#MenuItem_MenuID').val(),
                "Caption": $('#MenuItem_Caption').val(),
                "MenuLevel": $('#MenuItem_MenuLevel').val(),
                "ItemOrder": $('#MenuItem_ItemOrder').val(),
                "Module": $('#ModuleList').val(),
                "ScreenCode": $('#ScreenList').val(),
                "ParentID": $('#MenuItem_ParentID').val(),
                "HasChild": $('#MenuItem_HasChild').is(":checked"),
                "Description": $('#MenuItem_Description').val(),
                "IsActive": $('#MenuItem_IsActive').is(":checked")
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("Save", "MenuItem")',
                data: JSON.stringify({ menuItemView: jsonObject, isInsert: $("#hdnIsInsert").val() }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                cache: false,
                success: function (data) {
                    if (data.ParentID) {
                        data.ParentID = data.ParentID;
                    } else {
                        data.ParentID = "";
                    }
                    if (data.Description) {
                        data.Description = data.Description;
                    } else {
                        data.Description = "";
                    }
                    displayMenuItemList();
                    clearMenuItemData();
                    showMessage('Saved successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    });

    function editMenuItemData(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetMenuItem", "MenuItem")',
            data: { id: id },
            cache: false,
            async: false,
            success: function (data) {
                $('#ScreenList').get(0).options.length = 0;
                $('#MenuItem_MenuID').val(data.MenuID);
                $('#MenuItem_Caption').val(data.Caption);
                $('#MenuItem_MenuLevel').val(data.MenuLevel);
                $('#MenuItem_ItemOrder').val(data.ItemOrder);
                $('#ModuleList').val(data.ScreenModuleID);
                loadScreenDropdownList(data.ScreenModuleID);
                $('#MenuItem_ParentID').val(data.ParentID);
                $('#MenuItem_HasChild').prop("checked", data.HasChild);
                $('#MenuItem_IsActive').prop("checked", data.IsActive);
                $('#MenuItem_Description').val(data.Description);
                $('#ScreenList').val(data.ScreenCode).attr("selected", "selected");
                $("#hdnIsInsert").val(false);
            },
            error: function () {
                showMessage('Connection error.', 'error', 'Error!');
            }
        });

    }

    function deleteItem(id) {
        if (confirm("Are you sure you want to delete this menu item?")) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("Delete", "MenuItem")',
                data: { id: id },
                cache: false,
                success: function () {
                    clearMenuItemData();
                    displayMenuItemList();
                    $("#myModal").modal('hide');
                    showMessage('Deleted successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    }

    function clearMenuItemData() {
        $('#MenuItem_MenuID').val("");
        $('#MenuItem_Caption').val("");
        $('#MenuItem_MenuLevel').val("");
        $('#MenuItem_ItemOrder').val("");
        $('#ModuleList').val("");
        $('#ScreenList').val("");
        $('#MenuItem_ParentID').val("");
        $('#MenuItem_HasChild').is(":checked", false);
        $('#MenuItem_Description').val("");
    }

    function showMessage(message, priority, title) {
        $('#message').html("");
        $(document).trigger("add-alerts", [
            {
                'message': message,
                'priority': priority,
                'title': title
            }
        ]);
    }

</script>
<script src="~/Scripts/jquery.bsAlerts.js"></script>



















