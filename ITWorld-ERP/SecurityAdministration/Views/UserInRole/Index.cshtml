@using SecurityAdministration.BLL.ViewModels
@model UserInRoleVM

@{
    ViewBag.Title = "User In Roles Management";
}

@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-lg-12">
            <div data-alerts="alerts" id="message" data-titles="{}" data-ids="myid" data-fade="4000"></div>
        </div>
    </div>
    <div class="panel  panel-default">
        <div class="panel-heading">
            User in Roles Setup
            @Html.Hidden("hdnIsInsert", true)
        </div>
        <div class="panel-body">
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label>User</label>
                        @Html.DropDownListFor(model => model.UserList, Model.UserList, "--Select--", new { @id = "ddlfUserList", @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-6">
                        <label>Role</label>
                        @Html.DropDownListFor(model => model.RoleList, Model.RoleList, "--Select--", new { @id = "ddlfRoleList", @class = "form-control input-sm" })
                    </div>
                </div>
            </fieldset>
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6">
                        <label class="label-checkbox">Is Active</label>
                        @Html.CheckBoxFor(model => model.UserInRole.IsActive)
                    </div>
                </div>
            </fieldset>
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-6 ">
                        <input id="btnSave" type="button" value="Save" class="btn btn-default btn-sm" />
                        <input type="button" value="Reset" class="btn btn-default btn-sm" onclick="return clearUserInRoleData();" />
                    </div>
                </div>
            </fieldset>
        </div>
    </div>

}
<div class="panel panel-default ">
    <div class="panel-heading">
        List of Mappings Between Users and Roles
    </div>
    <div class="panel-body">
        <fieldset class="form-horizontal">
            <div class="form-group">
                <div class="col-md-6">
                    <label>User ID</label>
                    @Html.DropDownListFor(model => model.UserList, Model.UserList, "--Select--", new { @id = "ddlfUserListFilter", @class = "form-control input-sm" })
                </div>
                <div class="col-lg-6">
                    <label>Role ID</label>
                    @Html.DropDownListFor(model => model.RoleList, Model.RoleList, "--Select--", new { @id = "ddlfRoleListFilter", @class = "form-control input-sm" })
                </div>
            </div>
        </fieldset>
        <div id="grid"></div>
    </div>
</div>


<div id="myModal" class="modal fade">
    @Html.Partial("_ConfirmationView")
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $("#hdnIsInsert").val(true);
        clearUserInRoleData();
        displayUserInRoleList();
    });

    $('#ddlfUserListFilter').change(function () {
        var userID = $(this).val();
        var roleID = $('#ddlfRoleListFilter').val();
        displayUserInRoleList(userID, roleID);
    });

    $('#ddlfRoleListFilter').change(function () {
        var roleID = $(this).val();
        var userID = $('#ddlfUserListFilter').val();
        displayUserInRoleList(userID, roleID);
    });

    function displayUserInRoleList(userID, roleID) {
        if (userID == undefined) userID = null;
        if (roleID == undefined) roleID = null;

        //var dataSourceUrl = "/UserInRole/UserInRoleList?userID=" + userID + "&roleID=" + roleID + "";
        var dataSourceUrl = '@Url.Action("UserInRoleList", "UserInRole", new { userID = " + userID + ", roleID = " + roleID + " })';
        var dataSource = new kendo.data.DataSource({
            type: "aspnetmvc-ajax",
            transport: {
                read: {
                    url: dataSourceUrl,
                    type: "POST"
                }
            },
            schema: {
                data: function(data) {
                    return data.Data;
                },
                total: function(data) {
                    return data.Total;
                },
                model: {
                    fields: {
                        UserID: { type: "string" },
                        UserFullName: { type: "string" },
                        RoleName: { type: "string" },
                        RoleID: { type: "string" },
                        DesignationName: { type: "string" },
                    }
                }
            },
            sort: [
                { field: "UserID", dir: "asc" },
                { field: "UserFullName", dir: "asc" },
                { field: "RoleID", dir: "asc" },
                { field: "RoleName", dir: "asc" },
                { field: "DesignationName", dir: "asc" }
            ],
            pageSize: 10,
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true
        });
        $("#grid").kendoGrid({
            selectable: "row",
            dataSource: dataSource,
            filterable: {
                extra: true
            },
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            height: 200,
            groupable: false,
            sortable: true,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            columns: [
            {
                field: "UserID",
                title: "User ID",
                width: "150px",
            },
            {
                field: "UserFullName",
                title: "User Name",
                filterable: true,
            },
            {
                field: "RoleID",
                title: "Role ID",
                filterable: true,
            },
            {
                field: "RoleName",
                title: "Role Name",
                filterable: true,
            },
            {
                field: "DesignationName",
                title: "Designation",
                filterable: true,
            },
            {
                field: "IsActive",
                title: "Status",
                filterable: false,
                template:
                    function (dataItem) {
                        return dataItem.IsActive ? "Active" : "Inactive";
                    }
            },
            {
                width: 150,
                field: "UserID",
                title: "Select",
                sortable: false,
                filterable: false,
                template:
                    function (dataItem) {
                        if (typeof dataItem.Id != "string") {
                            return "<a class='btn-link' onclick='editUserInRoleData(" + dataItem.UserID + "," + dataItem.RoleID + ")'>Edit</a> | <a class='btn-link-delete' onclick='deleteUserInRoleData(" + dataItem.UserID + "," + dataItem.RoleID + ")'>Delete</a>";
                        }
                    }
            }]
        });
    }

    function editUserInRoleData(userID, roleID) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetUserInRole", "UserInRole")',
            data: { userID: userID, roleID: roleID },
            cache: false,
            dataTpye: "json",
            success: function (data) {
                $('#ddlfUserList').val(data.UserID);
                $('#ddlfRoleList').val(data.RoleID);
                $('#UserInRole_IsActive').prop('checked', data.IsActive);
                $("#hdnIsInsert").val(false);
            },
            error: function () {
                showMessage('Connection error.', 'error', 'Error!');
            }
        });
    }

    function deleteUserInRoleData(userId, roleId) {
        if (confirm("Are you sure you want to delete this Role?")) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("Delete", "UserInRole")',
                data: { userId: userId, roleId: roleId },
                cache: false,
                success: function () {
                    clearUserInRoleData();
                    displayUserInRoleList();
                    showMessage('Deleted successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    }

    function validatedUserInRole() {
        if ($('#ddlfUserList').val() == "") {
            showMessage('Role ID is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#ddlfRoleList').val() == "") {
            showMessage('Role Name is required.', 'warning', 'Warning!');
            return false;
        }
        return true;
    }

    function clearUserInRoleData() {
        $('#ddlfUserList').val('');
        $('#ddlfRoleList').val('');
        $('#UserInRole_IsActive').prop('checked', false);
        $("#hdnIsInsert").val(true);
        $('#ddlfUserList').attr("disabled", false);
        $('#ddlfRoleList').attr("disabled", false);
        $('#ddlfUserListFilter').val('');
        $('#ddlfRoleListFilter').val('');
    }

    function showMessage(message, priority, title) {
        $('#message').html("");
        $(document).trigger("add-alerts", [
          {
              'message': message,
              'priority': priority,
              'title': title
          }
        ]);
    }

    $("#btnSave").click(function () {
        if (validatedUserInRole()) {
            var jsonObject = {
                "UserID": $('#ddlfUserList').val(),
                "RoleID": $('#ddlfRoleList').val(),
                "IsActive": $('#UserInRole_IsActive').is(":checked")
            };
            $.ajax({
                type: "POST",
                url: '@Url.Action("Save", "UserInRole")',
                data: JSON.stringify({ UserInRoleView: jsonObject, isInsert: $("#hdnIsInsert").val() }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                cache: false,
                success: function (data) {
                    if (data == 1) {
                        showMessage('User ID already exists.', 'warning', 'Warning!');
                    } else {
                        clearUserInRoleData();
                        displayUserInRoleList();
                        showMessage('Saved successfully.', 'success', 'Success!');
                    }
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    });
</script>

<script src="~/Scripts/jquery.bsAlerts.js"></script>
